import restClient from "../restClient";

export function getTravelTour(page = 1, limit = 10) {
  return restClient({
    url: "travel-tour",
    method: "GET",
    params: { page, limit },
  })
    .then(response => {
      //   console.log("D·ªØ li·ªáu API tr·∫£ v·ªÅ:", response.data); 
      return response.data;
    })
    .catch(error => {
      console.error("L·ªói API:", error);
      throw error;
    });
}

export function getTravelTourByTourId(tour_id) {
  return restClient({
    url: `travel-tour/tour/${tour_id}`,
    method: "GET",
  })
    .then(response => {
      //   console.log("D·ªØ li·ªáu API tr·∫£ v·ªÅ:", response.data); 
      return response.data;
    })
    .catch(error => {
      console.error("L·ªói API:", error);
      throw error;
    });
}

export function createTravelTour(data) {
  console.log("D·ªØ li·ªáu g·ª≠i API:", data); // üëâ Th√™m log t·∫°i ƒë√¢y

  return restClient({
    url: "travel-tour/create",
    method: "POST",
    data,
  })
    .then(response => {
        console.log("D·ªØ li·ªáu API tr·∫£ v·ªÅ:", response.data); 
      return response.data;
    })
    .catch(error => {
      console.error("L·ªói API:", error);
      console.log("Chi ti·∫øt l·ªói:", error.response?.data); // üëâ Log chi ti·∫øt l·ªói tr·∫£ v·ªÅ t·ª´ backend

      throw error;
    });
}

export function deleteTravelTour(id) {
  return restClient({
    url: `travel-tour/delete/${id}`,
    method: "DELETE",
  })
    .then(response => {
      //   console.log("D·ªØ li·ªáu API tr·∫£ v·ªÅ:", response.data); 
      return response.data;
    })
    .catch(error => {
      console.error("L·ªói API:", error);
      throw error;
    });
}
export function closeTravelTour(id) {
  return restClient({
    url: `travel-tour/close/${id}`,
    method: "POST",
  })
      .then(response => {
        console.log("‚úÖ ƒê√≥ng l·ªãch kh·ªüi h√†nh th√†nh c√¥ng:", response.data);
        return response.data;
      })
      .catch(error => {
        console.error("‚ùå L·ªói khi ƒë√≥ng l·ªãch kh·ªüi h√†nh:", error.response?.data || error);
        throw error;
      });
}

export function getTravelToursByStaffId(staffId) {
  return restClient({
    url: `user/travel-tours/${staffId}`,
    method: "GET",
  })
      .then((response) => {
        console.log("üì• API tr·∫£ v·ªÅ:", response.data);
        return response.data;
      })
      .catch((error) => {
        console.error("L·ªói API:", error.response?.data || error);
        throw error;
      });
}

// L·∫•y danh s√°ch Travel Tours theo nh√¢n vi√™n v√† ƒëi·ªÉm ƒë·∫øn
export async function getTravelToursByStaffAndEndLocation(staffId, endLocationId) {
    try {
        const response = await restClient({
            url: `travel-tour/by-staff-end-location/${staffId}`,
            method: "GET",
            headers: {
            },
        });
        return response.data.data;
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch Travel Tours:", error.response?.data || error);
        throw error;
    }
}

// L·∫•y danh s√°ch Guide v√† Passenger theo travel tour ID
export function getGuidesAndPassengersByTravelTourId(travelTourId) {
    return restClient({
        url: `guide-tour/passenger-guide/${travelTourId}`,
        method: "GET",
    })
        .then((res) => res.data.data)
        .catch((err) => {
            console.error("L·ªói khi l·∫•y guide/passenger theo tour:", err);
            throw err;
        });
}
// L·∫•y chi ti·∫øt Travel Tour theo ID
export function getTravelTourById(id) {
    return restClient({
        url: `travel-tour/${id}`,
        method: "GET",
    })
        .then(response => response.data)
        .catch(error => {
            console.error("L·ªói API l·∫•y chi ti·∫øt h√†nh tr√¨nh:", error);
            throw error;
        });
}

// C·∫≠p nh·∫≠t Travel Tour theo ID
export function updateTravelTour(id, data) {
    return restClient({
        url: `travel-tour/update/${id}`,
        method: "PUT",
        data,
    })
        .then(response => response.data)
        .catch(error => {
            console.error("L·ªói API c·∫≠p nh·∫≠t h√†nh tr√¨nh:", error);
            throw error;
        });
}



